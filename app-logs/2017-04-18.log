2017-04-18T03:49:59.550Z - info: ../routes/bookRoutes.js : 68 Succeed in getting the book with 58f0e836c6a2c90ba2d14686 strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$["_doc"]["authors"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=138, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$["_doc"]["authors"], $ref=$, __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=137, id=string, name=Erin Rae Hoffer], seller=[$ref=$["_doc"]["seller"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=136, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$["_doc"]["reviews"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=135, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=134
2017-04-18T04:30:23.245Z - info: ../routes/bookRoutes.js : 31 GET /books
2017-04-18T04:30:23.247Z - info: ../routes/userRoutes.js : 46 GET /users/58f26a30ac62a4234f5a5228
2017-04-18T04:30:23.255Z - info: getBooksByQuery.js : 14 Rendering success JSON data in  get call :-  strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[0]["_doc"]["authors"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[0]["_doc"]["seller"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[0]["_doc"]["reviews"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=125, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[1]["_doc"]["authors"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=132, id=string, name=Saleh Hamadeh], seller=[$ref=$[1]["_doc"]["seller"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=131, id=string, name=Packt Publishing], reviews=[$ref=$[1]["_doc"]["reviews"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Mon Apr 10 2017 22:32:00 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , tags=true, genres=true, authors=true, seller=true, reviews=true, __v=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], , authors=[$ref=$[2]["_doc"]["authors"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[2]["_doc"]["seller"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[2]["_doc"]["reviews"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=120, publisher=Packt Publishing, publicationYear=2011, description=Snecond Editio is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=Snecond Editio, _bsontype=ObjectID, 0=88, 1=240, 2=171, 3=8, 4=88, 5=117, 6=224, 7=7, 8=222, 9=22, 10=87, 11=136, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[IT], , authors=[$ref=$[3]["_doc"]["authors"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=123, id=string, name=Joris Hermans], seller=[$ref=$[3]["_doc"]["seller"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=122, id=string, name=Packt Publishing], reviews=[$ref=$[3]["_doc"]["reviews"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=121, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=3.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1205, publisher=Packt Publishing, publicationYear=2017, description=You will then learn to create your first Node.js application and also create a command line tool for Node.js. Learn how Node.js is working so you can use that knowledge in your advance. A deep understand how to use the node.js api’s to build enterprise grade applications., title=Mastering Node.js, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=120, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[Cover, Encoding Video, Using and Manipulating HTML5 Video and Audio Elements, The JavaScript API, Acknowledgments, ], genres=[Interaction Design], , authors=[$ref=$[4]["_doc"]["authors"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=128, id=string, name=Tom Green, $ref=$[4]["_doc"]["authors"], $ref=$[4], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=127, id=string, name=Silvia Pfeiffer], seller=[$ref=$[4]["_doc"]["seller"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=126, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[4]["_doc"]["reviews"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=125, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=500, publisher=O'Reilly Media, Inc., publicationYear=2014, description=Beginning HTML5 Media, Second Edition is a comprehensive introduction to HTML5 video and audio. The HTML5 video standard enables browsers to support audio and video elements natively. This makes it very easy for web developers to publish audio and video, integrating both within the general presentation of web pages. For example, media elements can be styled using CSS (style sheets), viewed on a mobile device, and manipulated in a Canvas or an audio filter graph. The book offers techniques for providing accessibility to media elements, enabling consistent handling of alternative representations of media resources. The update includes all of the changes and revisions since the first HTML5 draft., title=Beginning HTML5 Media : Make the most of the new video and audio standards for the Web, Second Edition, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=124, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[5]["_doc"]["authors"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=133, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[5]["_doc"]["authors"], $ref=$[5], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=132, id=string, name=Erin Rae Hoffer], seller=[$ref=$[5]["_doc"]["seller"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=131, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[5]["_doc"]["reviews"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[6]["_doc"]["authors"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=138, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[6]["_doc"]["authors"], $ref=$[6], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=137, id=string, name=Erin Rae Hoffer], seller=[$ref=$[6]["_doc"]["seller"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=136, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[6]["_doc"]["reviews"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=135, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=134
2017-04-18T04:30:23.273Z - info: ../routes/userRoutes.js : 65 Success in retrieving users Sra
2017-04-18T04:30:25.745Z - info: ../routes/bookRoutes.js : 68 Succeed in getting the book with 58f0e836c6a2c90ba2d14686 strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$["_doc"]["authors"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=138, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$["_doc"]["authors"], $ref=$, __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=137, id=string, name=Erin Rae Hoffer], seller=[$ref=$["_doc"]["seller"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=136, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$["_doc"]["reviews"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=135, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=134
2017-04-18T04:40:48.151Z - info: ../routes/bookRoutes.js : 31 GET /books
2017-04-18T04:40:48.157Z - info: getBooksByQuery.js : 14 Rendering success JSON data in  get call :-  strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[0]["_doc"]["authors"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[0]["_doc"]["seller"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[0]["_doc"]["reviews"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=125, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[1]["_doc"]["authors"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=132, id=string, name=Saleh Hamadeh], seller=[$ref=$[1]["_doc"]["seller"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=131, id=string, name=Packt Publishing], reviews=[$ref=$[1]["_doc"]["reviews"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Mon Apr 10 2017 22:32:00 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , tags=true, genres=true, authors=true, seller=true, reviews=true, __v=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], , authors=[$ref=$[2]["_doc"]["authors"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[2]["_doc"]["seller"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[2]["_doc"]["reviews"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=120, publisher=Packt Publishing, publicationYear=2011, description=Snecond Editio is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=Snecond Editio, _bsontype=ObjectID, 0=88, 1=240, 2=171, 3=8, 4=88, 5=117, 6=224, 7=7, 8=222, 9=22, 10=87, 11=136, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[IT], , authors=[$ref=$[3]["_doc"]["authors"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=123, id=string, name=Joris Hermans], seller=[$ref=$[3]["_doc"]["seller"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=122, id=string, name=Packt Publishing], reviews=[$ref=$[3]["_doc"]["reviews"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=121, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=3.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1205, publisher=Packt Publishing, publicationYear=2017, description=You will then learn to create your first Node.js application and also create a command line tool for Node.js. Learn how Node.js is working so you can use that knowledge in your advance. A deep understand how to use the node.js api’s to build enterprise grade applications., title=Mastering Node.js, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=120, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[Cover, Encoding Video, Using and Manipulating HTML5 Video and Audio Elements, The JavaScript API, Acknowledgments, ], genres=[Interaction Design], , authors=[$ref=$[4]["_doc"]["authors"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=128, id=string, name=Tom Green, $ref=$[4]["_doc"]["authors"], $ref=$[4], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=127, id=string, name=Silvia Pfeiffer], seller=[$ref=$[4]["_doc"]["seller"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=126, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[4]["_doc"]["reviews"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=125, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=500, publisher=O'Reilly Media, Inc., publicationYear=2014, description=Beginning HTML5 Media, Second Edition is a comprehensive introduction to HTML5 video and audio. The HTML5 video standard enables browsers to support audio and video elements natively. This makes it very easy for web developers to publish audio and video, integrating both within the general presentation of web pages. For example, media elements can be styled using CSS (style sheets), viewed on a mobile device, and manipulated in a Canvas or an audio filter graph. The book offers techniques for providing accessibility to media elements, enabling consistent handling of alternative representations of media resources. The update includes all of the changes and revisions since the first HTML5 draft., title=Beginning HTML5 Media : Make the most of the new video and audio standards for the Web, Second Edition, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=124, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[5]["_doc"]["authors"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=133, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[5]["_doc"]["authors"], $ref=$[5], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=132, id=string, name=Erin Rae Hoffer], seller=[$ref=$[5]["_doc"]["seller"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=131, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[5]["_doc"]["reviews"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[6]["_doc"]["authors"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=138, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[6]["_doc"]["authors"], $ref=$[6], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=137, id=string, name=Erin Rae Hoffer], seller=[$ref=$[6]["_doc"]["seller"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=136, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[6]["_doc"]["reviews"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=135, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=134
2017-04-18T04:40:48.170Z - info: ../routes/userRoutes.js : 46 GET /users/58f26a30ac62a4234f5a5228
2017-04-18T04:40:48.173Z - info: ../routes/userRoutes.js : 65 Success in retrieving users Sra
2017-04-18T04:40:50.241Z - info: ../routes/bookRoutes.js : 68 Succeed in getting the book with 58f0e797c6a2c90ba2d14681 strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$["_doc"]["authors"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=133, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$["_doc"]["authors"], $ref=$, __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=132, id=string, name=Erin Rae Hoffer], seller=[$ref=$["_doc"]["seller"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=131, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$["_doc"]["reviews"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=129
2017-04-18T04:52:13.890Z - info: ../routes/bookRoutes.js : 31 GET /books
2017-04-18T04:52:13.898Z - info: getBooksByQuery.js : 14 Rendering success JSON data in  get call :-  strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[0]["_doc"]["authors"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[0]["_doc"]["seller"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[0]["_doc"]["reviews"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=125, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[1]["_doc"]["authors"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=132, id=string, name=Saleh Hamadeh], seller=[$ref=$[1]["_doc"]["seller"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=131, id=string, name=Packt Publishing], reviews=[$ref=$[1]["_doc"]["reviews"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Mon Apr 10 2017 22:32:00 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , tags=true, genres=true, authors=true, seller=true, reviews=true, __v=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], , authors=[$ref=$[2]["_doc"]["authors"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[2]["_doc"]["seller"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[2]["_doc"]["reviews"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=120, publisher=Packt Publishing, publicationYear=2011, description=Snecond Editio is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=Snecond Editio, _bsontype=ObjectID, 0=88, 1=240, 2=171, 3=8, 4=88, 5=117, 6=224, 7=7, 8=222, 9=22, 10=87, 11=136, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[IT], , authors=[$ref=$[3]["_doc"]["authors"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=123, id=string, name=Joris Hermans], seller=[$ref=$[3]["_doc"]["seller"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=122, id=string, name=Packt Publishing], reviews=[$ref=$[3]["_doc"]["reviews"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=121, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=3.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1205, publisher=Packt Publishing, publicationYear=2017, description=You will then learn to create your first Node.js application and also create a command line tool for Node.js. Learn how Node.js is working so you can use that knowledge in your advance. A deep understand how to use the node.js api’s to build enterprise grade applications., title=Mastering Node.js, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=120, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[Cover, Encoding Video, Using and Manipulating HTML5 Video and Audio Elements, The JavaScript API, Acknowledgments, ], genres=[Interaction Design], , authors=[$ref=$[4]["_doc"]["authors"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=128, id=string, name=Tom Green, $ref=$[4]["_doc"]["authors"], $ref=$[4], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=127, id=string, name=Silvia Pfeiffer], seller=[$ref=$[4]["_doc"]["seller"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=126, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[4]["_doc"]["reviews"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=125, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=500, publisher=O'Reilly Media, Inc., publicationYear=2014, description=Beginning HTML5 Media, Second Edition is a comprehensive introduction to HTML5 video and audio. The HTML5 video standard enables browsers to support audio and video elements natively. This makes it very easy for web developers to publish audio and video, integrating both within the general presentation of web pages. For example, media elements can be styled using CSS (style sheets), viewed on a mobile device, and manipulated in a Canvas or an audio filter graph. The book offers techniques for providing accessibility to media elements, enabling consistent handling of alternative representations of media resources. The update includes all of the changes and revisions since the first HTML5 draft., title=Beginning HTML5 Media : Make the most of the new video and audio standards for the Web, Second Edition, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=124, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[5]["_doc"]["authors"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=133, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[5]["_doc"]["authors"], $ref=$[5], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=132, id=string, name=Erin Rae Hoffer], seller=[$ref=$[5]["_doc"]["seller"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=131, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[5]["_doc"]["reviews"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[6]["_doc"]["authors"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=138, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[6]["_doc"]["authors"], $ref=$[6], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=137, id=string, name=Erin Rae Hoffer], seller=[$ref=$[6]["_doc"]["seller"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=136, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[6]["_doc"]["reviews"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=135, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=134
2017-04-18T04:52:13.913Z - info: ../routes/userRoutes.js : 46 GET /users/58f26a30ac62a4234f5a5228
2017-04-18T04:52:13.915Z - info: ../routes/userRoutes.js : 65 Success in retrieving users Sra
2017-04-18T04:55:29.806Z - info: ../routes/bookRoutes.js : 68 Succeed in getting the book with 58f0ab085875e007de165788 strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , tags=true, genres=true, authors=true, seller=true, reviews=true, __v=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], , authors=[$ref=$["_doc"]["authors"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$["_doc"]["seller"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$["_doc"]["reviews"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=120, publisher=Packt Publishing, publicationYear=2011, description=Snecond Editio is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=Snecond Editio, _bsontype=ObjectID, 0=88, 1=240, 2=171, 3=8, 4=88, 5=117, 6=224, 7=7, 8=222, 9=22, 10=87, 11=136
2017-04-18T05:04:57.327Z - info: ../routes/bookRoutes.js : 22 GET /
2017-04-18T05:04:57.327Z - info: ../routes/bookRoutes.js : 23 Rendering json data in get call
2017-04-18T05:05:09.330Z - info: ../routes/bookRoutes.js : 31 GET /books
2017-04-18T05:05:09.335Z - info: getBooksByQuery.js : 14 Rendering success JSON data in  get call :-  strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[0]["_doc"]["authors"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[0]["_doc"]["seller"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[0]["_doc"]["reviews"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=125, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[1]["_doc"]["authors"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=132, id=string, name=Saleh Hamadeh], seller=[$ref=$[1]["_doc"]["seller"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=131, id=string, name=Packt Publishing], reviews=[$ref=$[1]["_doc"]["reviews"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Mon Apr 10 2017 22:32:00 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , tags=true, genres=true, authors=true, seller=true, reviews=true, __v=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], , authors=[$ref=$[2]["_doc"]["authors"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[2]["_doc"]["seller"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[2]["_doc"]["reviews"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=120, publisher=Packt Publishing, publicationYear=2011, description=Snecond Editio is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=Snecond Editio, _bsontype=ObjectID, 0=88, 1=240, 2=171, 3=8, 4=88, 5=117, 6=224, 7=7, 8=222, 9=22, 10=87, 11=136, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[IT], , authors=[$ref=$[3]["_doc"]["authors"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=123, id=string, name=Joris Hermans], seller=[$ref=$[3]["_doc"]["seller"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=122, id=string, name=Packt Publishing], reviews=[$ref=$[3]["_doc"]["reviews"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=121, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=3.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1205, publisher=Packt Publishing, publicationYear=2017, description=You will then learn to create your first Node.js application and also create a command line tool for Node.js. Learn how Node.js is working so you can use that knowledge in your advance. A deep understand how to use the node.js api’s to build enterprise grade applications., title=Mastering Node.js, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=120, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[Cover, Encoding Video, Using and Manipulating HTML5 Video and Audio Elements, The JavaScript API, Acknowledgments, ], genres=[Interaction Design], , authors=[$ref=$[4]["_doc"]["authors"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=128, id=string, name=Tom Green, $ref=$[4]["_doc"]["authors"], $ref=$[4], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=127, id=string, name=Silvia Pfeiffer], seller=[$ref=$[4]["_doc"]["seller"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=126, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[4]["_doc"]["reviews"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=125, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=500, publisher=O'Reilly Media, Inc., publicationYear=2014, description=Beginning HTML5 Media, Second Edition is a comprehensive introduction to HTML5 video and audio. The HTML5 video standard enables browsers to support audio and video elements natively. This makes it very easy for web developers to publish audio and video, integrating both within the general presentation of web pages. For example, media elements can be styled using CSS (style sheets), viewed on a mobile device, and manipulated in a Canvas or an audio filter graph. The book offers techniques for providing accessibility to media elements, enabling consistent handling of alternative representations of media resources. The update includes all of the changes and revisions since the first HTML5 draft., title=Beginning HTML5 Media : Make the most of the new video and audio standards for the Web, Second Edition, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=124, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[5]["_doc"]["authors"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=133, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[5]["_doc"]["authors"], $ref=$[5], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=132, id=string, name=Erin Rae Hoffer], seller=[$ref=$[5]["_doc"]["seller"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=131, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[5]["_doc"]["reviews"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[6]["_doc"]["authors"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=138, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[6]["_doc"]["authors"], $ref=$[6], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=137, id=string, name=Erin Rae Hoffer], seller=[$ref=$[6]["_doc"]["seller"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=136, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[6]["_doc"]["reviews"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=135, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=134
2017-04-18T05:05:09.349Z - info: ../routes/userRoutes.js : 46 GET /users/58f26a30ac62a4234f5a5228
2017-04-18T05:05:09.351Z - info: ../routes/userRoutes.js : 65 Success in retrieving users Sra
2017-04-18T05:05:15.133Z - info: ../routes/bookRoutes.js : 31 GET /books
2017-04-18T05:05:15.138Z - info: getBooksByQuery.js : 14 Rendering success JSON data in  get call :-  strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[0]["_doc"]["authors"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[0]["_doc"]["seller"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[0]["_doc"]["reviews"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=125, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[1]["_doc"]["authors"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=132, id=string, name=Saleh Hamadeh], seller=[$ref=$[1]["_doc"]["seller"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=131, id=string, name=Packt Publishing], reviews=[$ref=$[1]["_doc"]["reviews"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Mon Apr 10 2017 22:32:00 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , tags=true, genres=true, authors=true, seller=true, reviews=true, __v=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], , authors=[$ref=$[2]["_doc"]["authors"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[2]["_doc"]["seller"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[2]["_doc"]["reviews"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=120, publisher=Packt Publishing, publicationYear=2011, description=Snecond Editio is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=Snecond Editio, _bsontype=ObjectID, 0=88, 1=240, 2=171, 3=8, 4=88, 5=117, 6=224, 7=7, 8=222, 9=22, 10=87, 11=136, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[IT], , authors=[$ref=$[3]["_doc"]["authors"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=123, id=string, name=Joris Hermans], seller=[$ref=$[3]["_doc"]["seller"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=122, id=string, name=Packt Publishing], reviews=[$ref=$[3]["_doc"]["reviews"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=121, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=3.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1205, publisher=Packt Publishing, publicationYear=2017, description=You will then learn to create your first Node.js application and also create a command line tool for Node.js. Learn how Node.js is working so you can use that knowledge in your advance. A deep understand how to use the node.js api’s to build enterprise grade applications., title=Mastering Node.js, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=120, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[Cover, Encoding Video, Using and Manipulating HTML5 Video and Audio Elements, The JavaScript API, Acknowledgments, ], genres=[Interaction Design], , authors=[$ref=$[4]["_doc"]["authors"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=128, id=string, name=Tom Green, $ref=$[4]["_doc"]["authors"], $ref=$[4], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=127, id=string, name=Silvia Pfeiffer], seller=[$ref=$[4]["_doc"]["seller"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=126, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[4]["_doc"]["reviews"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=125, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=500, publisher=O'Reilly Media, Inc., publicationYear=2014, description=Beginning HTML5 Media, Second Edition is a comprehensive introduction to HTML5 video and audio. The HTML5 video standard enables browsers to support audio and video elements natively. This makes it very easy for web developers to publish audio and video, integrating both within the general presentation of web pages. For example, media elements can be styled using CSS (style sheets), viewed on a mobile device, and manipulated in a Canvas or an audio filter graph. The book offers techniques for providing accessibility to media elements, enabling consistent handling of alternative representations of media resources. The update includes all of the changes and revisions since the first HTML5 draft., title=Beginning HTML5 Media : Make the most of the new video and audio standards for the Web, Second Edition, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=124, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[5]["_doc"]["authors"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=133, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[5]["_doc"]["authors"], $ref=$[5], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=132, id=string, name=Erin Rae Hoffer], seller=[$ref=$[5]["_doc"]["seller"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=131, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[5]["_doc"]["reviews"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[6]["_doc"]["authors"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=138, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[6]["_doc"]["authors"], $ref=$[6], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=137, id=string, name=Erin Rae Hoffer], seller=[$ref=$[6]["_doc"]["seller"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=136, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[6]["_doc"]["reviews"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=135, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=134
2017-04-18T05:05:15.153Z - info: ../routes/userRoutes.js : 46 GET /users/58f26a30ac62a4234f5a5228
2017-04-18T05:05:15.161Z - info: ../routes/userRoutes.js : 65 Success in retrieving users Sra
2017-04-18T05:05:40.638Z - info: ../routes/bookRoutes.js : 31 GET /books
2017-04-18T05:05:40.643Z - info: getBooksByQuery.js : 14 Rendering success JSON data in  get call :-  strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[0]["_doc"]["authors"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[0]["_doc"]["seller"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[0]["_doc"]["reviews"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[0], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=125, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$[1]["_doc"]["authors"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=132, id=string, name=Saleh Hamadeh], seller=[$ref=$[1]["_doc"]["seller"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=131, id=string, name=Packt Publishing], reviews=[$ref=$[1]["_doc"]["reviews"], $ref=$[1], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[1], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Mon Apr 10 2017 22:32:00 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=203, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , tags=true, genres=true, authors=true, seller=true, reviews=true, __v=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], , authors=[$ref=$[2]["_doc"]["authors"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$[2]["_doc"]["seller"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$[2]["_doc"]["reviews"], $ref=$[2], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[2], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=120, publisher=Packt Publishing, publicationYear=2011, description=Snecond Editio is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=Snecond Editio, _bsontype=ObjectID, 0=88, 1=240, 2=171, 3=8, 4=88, 5=117, 6=224, 7=7, 8=222, 9=22, 10=87, 11=136, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[IT], , authors=[$ref=$[3]["_doc"]["authors"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=123, id=string, name=Joris Hermans], seller=[$ref=$[3]["_doc"]["seller"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=122, id=string, name=Packt Publishing], reviews=[$ref=$[3]["_doc"]["reviews"], $ref=$[3], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[3], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=121, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=3.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1205, publisher=Packt Publishing, publicationYear=2017, description=You will then learn to create your first Node.js application and also create a command line tool for Node.js. Learn how Node.js is working so you can use that knowledge in your advance. A deep understand how to use the node.js api’s to build enterprise grade applications., title=Mastering Node.js, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=28, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=120, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[Cover, Encoding Video, Using and Manipulating HTML5 Video and Audio Elements, The JavaScript API, Acknowledgments, ], genres=[Interaction Design], , authors=[$ref=$[4]["_doc"]["authors"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=128, id=string, name=Tom Green, $ref=$[4]["_doc"]["authors"], $ref=$[4], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=127, id=string, name=Silvia Pfeiffer], seller=[$ref=$[4]["_doc"]["seller"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=126, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[4]["_doc"]["reviews"], $ref=$[4], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[4], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=125, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=500, publisher=O'Reilly Media, Inc., publicationYear=2014, description=Beginning HTML5 Media, Second Edition is a comprehensive introduction to HTML5 video and audio. The HTML5 video standard enables browsers to support audio and video elements natively. This makes it very easy for web developers to publish audio and video, integrating both within the general presentation of web pages. For example, media elements can be styled using CSS (style sheets), viewed on a mobile device, and manipulated in a Canvas or an audio filter graph. The book offers techniques for providing accessibility to media elements, enabling consistent handling of alternative representations of media resources. The update includes all of the changes and revisions since the first HTML5 draft., title=Beginning HTML5 Media : Make the most of the new video and audio standards for the Web, Second Edition, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=97, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=124, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[5]["_doc"]["authors"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=133, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[5]["_doc"]["authors"], $ref=$[5], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=132, id=string, name=Erin Rae Hoffer], seller=[$ref=$[5]["_doc"]["seller"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=131, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[5]["_doc"]["reviews"], $ref=$[5], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[5], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=130, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=231, 3=151, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=129, strictMode=true, $ref=$[0]["$__"]["selected"], shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[The Blur of Interconnected Environments, Theorizing Digital Culture: New Models of Convergence, Hybrid Design Practice, Changing Definitions of Space, A Framework for Interconnected Environments, Spheres of Inquiry, An Exercise in Hybrid Design Practice, Architecture as Interface, Conclusion], genres=[Interaction Design], , authors=[$ref=$[6]["_doc"]["authors"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=138, id=string, name=Jonathan Follett, Erin Rae Hoffer, $ref=$[6]["_doc"]["authors"], $ref=$[6], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=137, id=string, name=Erin Rae Hoffer], seller=[$ref=$[6]["_doc"]["seller"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=136, id=string, name=O'Reilly Media, Inc.], reviews=[$ref=$[6]["_doc"]["reviews"], $ref=$[6], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$[0]["$__"]["activePaths"]["stateNames"], $ref=$[6], fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=Fri Apr 14 2017 20:41:45 GMT+0530 (IST), _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=135, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=550, deliveryCharges=40, price=227, publisher=O'Reilly Media, Inc., publicationYear=2016, description=We spend 90 percent of our lives indoors, in increasingly interconnected environments. Internet-enabled devices creep into the spaces we inhabit, and these devices report back on spatial conditions such as light, radiation, air quality and temperature, count the number of people stopping at retail displays minute by minute, detect intruders and security breaches, monitor locations and track characteristics of equipment and supply chain elements, enable us to open locked doors remotely using our mobile devices, and pass terabytes of data to backend systems that analyze, report, and modify the environments we occupy., title=Designing interconnected (IoT) environments, _bsontype=ObjectID, 0=88, 1=240, 2=232, 3=54, 4=198, 5=162, 6=201, 7=11, 8=162, 9=209, 10=70, 11=134
2017-04-18T05:05:40.656Z - info: ../routes/userRoutes.js : 46 GET /users/58f26a30ac62a4234f5a5228
2017-04-18T05:05:40.659Z - info: ../routes/userRoutes.js : 65 Success in retrieving users Sra
2017-04-18T05:07:58.610Z - info: ../routes/bookRoutes.js : 68 Succeed in getting the book with 58ebbaa730f66128b28c3a7d strictMode=true, , shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, tags=init, genres=init, authors=init, seller=init, reviews=init, __v=init, pages=init, deliveryCharges=init, price=init, publisher=init, publicationYear=init, description=init, title=init, _id=init, , , __v=true, tags=true, genres=true, authors=true, seller=true, reviews=true, pages=true, deliveryCharges=true, price=true, publisher=true, publicationYear=true, description=true, title=true, _id=true, , , stateNames=[require, modify, init, default, ignore], ownerDocument=undefined, fullPath=undefined, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }], _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, tags=[], genres=[friction], bookCower=/images/id, authors=[$ref=$["_doc"]["authors"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=authors, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=128, id=string, name=Saleh Hamadeh], seller=[$ref=$["_doc"]["seller"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, id=init, name=init, _id=init, , , _id=true, id=true, name=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=seller, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=127, id=string, name=Packt Publishing], reviews=[$ref=$["_doc"]["reviews"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _id=undefined, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, reviewerRatingOutof=init, date=init, _id=init, feedback=init, reviewerRating=init, reviewerName=init, , , date=true, _id=true, feedback=true, reviewerRatingOutof=true, reviewerRating=true, reviewerName=true, , , $ref=$["$__"]["activePaths"]["stateNames"], $ref=$, fullPath=reviews, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, isNew=false, errors=undefined, date=null, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=126, feedback=Good books to Learn, reviewerRatingOutof=5, reviewerRating=4.5, reviewerName=Srikanth], __v=0, pages=150, deliveryCharges=100, price=1200, publisher=Packt Publishing, publicationYear=2017, description=Since JavaScript is the language of the web, building APIs using Node.js provides a seamless development experience on both the front end and the back end. Explore the practical side of REST to build data-centric applications with Node About This Video Work through a series of guidelines and best practices to efficiently design RESTful Web APIs with Node Understand the structure of APIs, their authentication protocols, and their implementation tools This practical guide provides the knowledge you need to delve into the endless possibilities enabled by Big Data In Detail RESTful Web APIs allow developers to create unprecedented applications by leveraging the data on the internet., title=RESTful Web API Design with Node.js - Second Edition, _bsontype=ObjectID, 0=88, 1=235, 2=186, 3=167, 4=48, 5=246, 6=97, 7=40, 8=178, 9=140, 10=58, 11=125
2017-04-18T09:07:00.731Z - info: db_connection.js : 67 Mongoose default connection disconnected
